openapi: 3.0.3
info:
  title: Auth Service - Sistema Hospitalario
  description: |
    Servicio de autenticación y autorización para el sistema hospitalario.
    
    ## Funcionalidades
    - **Login**: Autenticación de usuarios con JWT
    - **Registro**: Creación de nuevos usuarios
    - **Verificación de tokens**: Validación de JWT
    
    ## Bases de Datos
    - **Central** (Quito): Base de datos principal
    - **Guayaquil**: Base de datos regional
    - **Cuenca**: Base de datos regional
    
    El servicio busca usuarios en todas las bases de datos distribuidas.
    
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: desarrollo@hospitalapp.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3001
    description: Auth Service - Servidor de desarrollo
  - url: https://auth.hospitalapp.com
    description: Auth Service - Servidor de producción

tags:
  - name: auth
    description: Autenticación y gestión de usuarios

paths:
  /login:
    post:
      tags:
        - auth
      summary: Iniciar sesión
      description: |
        Autentica un usuario y devuelve un token JWT.
        
        **Rate Limiting**: Máximo 5 intentos por IP cada 15 minutos.
        
        **Búsqueda de usuarios**: El servicio busca en todas las bases de datos distribuidas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@hospital.com"
                  description: Email del usuario
                password:
                  type: string
                  format: password
                  example: "password123"
                  description: Contraseña del usuario
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    description: Token JWT válido por 24 horas
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "admin@hospital.com"
                      rol:
                        type: string
                        enum: [admin, medico]
                        example: "admin"
                      id_centro:
                        type: integer
                        example: 1
                      id_medico:
                        type: integer
                        nullable: true
                        example: 1
                      database:
                        type: string
                        example: "central"
                        description: Base de datos donde se encontró el usuario
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Demasiados intentos de login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      tags:
        - auth
      summary: Registrar nuevo usuario
      description: |
        Crea un nuevo usuario en el sistema.
        
        **Centros disponibles**:
        - 1 = Quito (Central)
        - 2 = Guayaquil
        - 3 = Cuenca
        
        El usuario se crea en la base de datos correspondiente al centro especificado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - rol
                - id_centro
              properties:
                email:
                  type: string
                  format: email
                  example: "medico@hospital.com"
                  description: Email del usuario
                password:
                  type: string
                  format: password
                  example: "password123"
                  description: Contraseña del usuario (mínimo 6 caracteres)
                rol:
                  type: string
                  enum: [admin, medico]
                  example: "medico"
                  description: Rol del usuario
                id_centro:
                  type: integer
                  example: 1
                  description: ID del centro médico
                id_medico:
                  type: integer
                  nullable: true
                  example: 1
                  description: ID del médico (solo si rol es 'medico')
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario registrado exitosamente"
                  id:
                    type: integer
                    example: 1
                    description: ID del usuario creado
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /verify-token:
    post:
      tags:
        - auth
      summary: Verificar token JWT
      description: |
        Valida un token JWT y devuelve información del usuario.
        
        Útil para verificar la validez del token en el frontend.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  description: Token JWT a verificar
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "admin@hospital.com"
                      rol:
                        type: string
                        example: "admin"
                      id_centro:
                        type: integer
                        example: 1
                      id_medico:
                        type: integer
                        nullable: true
                        example: 1
                      database:
                        type: string
                        example: "central"
        '400':
          description: Token requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Token inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      tags:
        - auth
      summary: Health check
      description: Verifica el estado del servicio
      responses:
        '200':
          description: Servicio funcionando correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  service:
                    type: string
                    example: "auth-service"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Mensaje de error descriptivo"
        details:
          type: string
          nullable: true
          example: "Detalles adicionales del error"
