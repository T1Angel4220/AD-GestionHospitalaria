openapi: 3.0.3
info:
  title: HospitalApp - Sistema de Gestión Hospitalaria
  description: |
    API REST para el sistema de gestión hospitalaria con arquitectura de microservicios.
    
    ## Características Principales
    - **Autenticación JWT** con roles diferenciados (admin/medico)
    - **Bases de datos distribuidas** por centro médico
    - **CRUD completo** para todas las entidades
    - **Sistema de reportes** avanzado
    - **Validaciones robustas** y manejo de errores
    
    ## Arquitectura
    - **Backend**: Node.js + Express + TypeScript
    - **Base de Datos**: MySQL distribuida
    - **Autenticación**: JWT con bcrypt
    - **Documentación**: Swagger/OpenAPI 3.0
    
    ## Roles de Usuario
    - **admin**: Acceso completo al sistema
    - **medico**: Acceso limitado a su centro médico
    
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: desarrollo@hospitalapp.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3000/api
    description: Servidor de desarrollo
  - url: https://api.hospitalapp.com/api
    description: Servidor de producción

tags:
  - name: auth
    description: Autenticación y gestión de usuarios
  - name: centros
    description: Gestión de centros médicos
  - name: medicos
    description: Gestión de médicos y especialidades
  - name: especialidades
    description: Gestión de especialidades médicas
  - name: empleados
    description: Gestión de empleados del hospital
  - name: consultas
    description: Gestión de consultas médicas
  - name: reportes
    description: Sistema de reportes y estadísticas

paths:
  # ===========================================
  # ENDPOINTS DE PRUEBA
  # ===========================================
  /test-db:
    get:
      tags:
        - auth
      summary: Probar conexión a base de datos
      description: |
        Endpoint de prueba para verificar la conexión a la base de datos seleccionada.
        
        **Comportamiento:**
        - Sin `X-Centro-Id`: Usa BD Central (Quito)
        - Con `X-Centro-Id`: Usa BD Local correspondiente
        
        **Ejemplos:**
        ```
        GET /test-db                    → BD Central (Quito)
        GET /test-db + X-Centro-Id: 2   → BD Guayaquil
        GET /test-db + X-Centro-Id: 3   → BD Cuenca
        ```
      parameters:
        - name: X-Centro-Id
          in: header
          required: false
          schema:
            type: integer
            enum: [1, 2, 3]
          example: 2
          description: |
            ID del centro médico (opcional):
            - 1 = Quito (Central) - Por defecto
            - 2 = Guayaquil
            - 3 = Cuenca
      responses:
        '200':
          description: Conexión exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conexión exitosa"
                  database:
                    type: object
                    properties:
                      host:
                        type: string
                        example: "192.168.1.16"
                      database:
                        type: string
                        example: "hospital_guayaquil"
                      user:
                        type: string
                        example: "admin_guayaquil"
                      centroId:
                        type: integer
                        example: 2
                  query_result:
                    type: object
                    properties:
                      now:
                        type: string
                        format: date-time
                        example: "2024-01-15T10:30:00Z"
                      database_name:
                        type: string
                        example: "hospital_guayaquil"
                      user_name:
                        type: string
                        example: "admin_guayaquil@192.168.1.16"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '400':
          description: Error en parámetros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error de conexión
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-consultas:
    get:
      tags:
        - auth
      summary: Probar consultas en base de datos local
      description: |
        Endpoint especial para probar la conexión a la base de datos local y verificar datos.
        
        **Comportamiento:**
        - Requiere `X-Centro-Id` header
        - Muestra estadísticas de datos en la BD local
        - Útil para verificar si hay datos en Guayaquil/Cuenca
        
        **Ejemplos:**
        ```
        GET /test-consultas + X-Centro-Id: 2   → Estadísticas BD Guayaquil
        GET /test-consultas + X-Centro-Id: 3   → Estadísticas BD Cuenca
        ```
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
            enum: [2, 3]
          example: 2
          description: |
            ID del centro médico local:
            - 2 = Guayaquil
            - 3 = Cuenca
      responses:
        '200':
          description: Estadísticas de la base de datos local
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Información de la base de datos local"
                  database:
                    type: object
                    properties:
                      host:
                        type: string
                        example: "192.168.1.16"
                      database:
                        type: string
                        example: "hospital_guayaquil"
                      user:
                        type: string
                        example: "admin_guayaquil"
                      centroId:
                        type: integer
                        example: 2
                  estadisticas:
                    type: object
                    properties:
                      consultas:
                        type: integer
                        example: 3
                      medicos:
                        type: integer
                        example: 3
                      pacientes:
                        type: integer
                        example: 3
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '400':
          description: X-Centro-Id requerido o inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error de conexión
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /test-centros:
    get:
      tags:
        - auth
      summary: Probar todos los centros médicos
      description: |
        Endpoint especial para probar la conexión a todos los centros médicos.
        
        **Devuelve información de conexión para:**
        - BD Central (Quito)
        - BD Guayaquil  
        - BD Cuenca
        
        **Útil para verificar que todas las bases de datos distribuidas funcionan correctamente.**
      responses:
        '200':
          description: Información de todos los centros
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Información de todos los centros médicos"
                  centros:
                    type: array
                    items:
                      type: object
                      properties:
                        centroId:
                          type: integer
                          example: 1
                        nombre:
                          type: string
                          example: "Quito"
                        host:
                          type: string
                          example: "192.168.1.14"
                        database:
                          type: string
                          example: "hospital_central"
                        user:
                          type: string
                          example: "admin_central"
                        status:
                          type: string
                          example: "conectado"
                        timestamp:
                          type: string
                          format: date-time
                          example: "2024-01-15T10:30:00Z"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '500':
          description: Error de conexión
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # AUTENTICACIÓN
  # ===========================================
  /auth/login:
    post:
      tags:
        - auth
      summary: Iniciar sesión
      description: Autentica un usuario y devuelve un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@hospital.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login exitoso"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - auth
      summary: Registrar nuevo usuario (Solo Admin)
      description: Crea un nuevo usuario en el sistema
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - rol
                - id_centro
              properties:
                email:
                  type: string
                  format: email
                  example: "medico@hospital.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                rol:
                  type: string
                  enum: [admin, medico]
                  example: "medico"
                id_centro:
                  type: integer
                  example: 1
                id_medico:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      tags:
        - auth
      summary: Obtener perfil del usuario
      description: Devuelve la información del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # ADMINISTRACIÓN - CENTROS MÉDICOS
  # ===========================================
  /admin/centros:
    get:
      tags:
        - centros
      summary: Listar centros médicos
      description: Obtiene la lista de todos los centros médicos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de centros médicos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CentroMedico'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - centros
      summary: Crear centro médico
      description: Crea un nuevo centro médico
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentroMedicoCreate'
      responses:
        '201':
          description: Centro médico creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/centros/{id}:
    get:
      tags:
        - centros
      summary: Obtener centro médico por ID
      description: Obtiene un centro médico específico
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Centro médico encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CentroMedico'
        '404':
          description: Centro médico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - centros
      summary: Actualizar centro médico
      description: Actualiza un centro médico existente
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentroMedicoUpdate'
      responses:
        '200':
          description: Centro médico actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '404':
          description: Centro médico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - centros
      summary: Eliminar centro médico
      description: Elimina un centro médico
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Centro médico eliminado exitosamente
        '404':
          description: Centro médico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # ADMINISTRACIÓN - MÉDICOS
  # ===========================================
  /admin/medicos:
    get:
      tags:
        - medicos
      summary: Listar médicos
      description: Obtiene la lista de todos los médicos con información de especialidad y centro
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de médicos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medico'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - medicos
      summary: Crear médico
      description: Crea un nuevo médico
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicoCreate'
      responses:
        '201':
          description: Médico creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombres:
                    type: string
                    example: "Juan"
                  apellidos:
                    type: string
                    example: "Pérez"
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/medicos/{id}:
    get:
      tags:
        - medicos
      summary: Obtener médico por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Médico encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medico'
        '404':
          description: Médico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - medicos
      summary: Actualizar médico
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicoUpdate'
      responses:
        '200':
          description: Médico actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombres:
                    type: string
                    example: "Juan"
                  apellidos:
                    type: string
                    example: "Pérez"

    delete:
      tags:
        - medicos
      summary: Eliminar médico
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Médico eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Médico eliminado correctamente"
        '404':
          description: Médico no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # ADMINISTRACIÓN - ESPECIALIDADES
  # ===========================================
  /admin/especialidades:
    get:
      tags:
        - especialidades
      summary: Listar especialidades
      description: Obtiene la lista de todas las especialidades médicas
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de especialidades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Especialidad'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - especialidades
      summary: Crear especialidad
      description: Crea una nueva especialidad médica
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EspecialidadCreate'
      responses:
        '201':
          description: Especialidad creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: "Cardiología"
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/especialidades/{id}:
    get:
      tags:
        - especialidades
      summary: Obtener especialidad por ID
      description: Obtiene una especialidad específica
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Especialidad encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Especialidad'
        '404':
          description: Especialidad no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - especialidades
      summary: Actualizar especialidad
      description: Actualiza una especialidad existente
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EspecialidadUpdate'
      responses:
        '200':
          description: Especialidad actualizada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: "Cardiología"
        '404':
          description: Especialidad no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - especialidades
      summary: Eliminar especialidad
      description: Elimina una especialidad
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Especialidad eliminada exitosamente
        '404':
          description: Especialidad no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # ADMINISTRACIÓN - EMPLEADOS
  # ===========================================
  /admin/empleados:
    get:
      tags:
        - empleados
      summary: Listar empleados
      description: Obtiene la lista de todos los empleados con información del centro
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de empleados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Empleado'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - empleados
      summary: Crear empleado
      description: Crea un nuevo empleado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmpleadoCreate'
      responses:
        '201':
          description: Empleado creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombres:
                    type: string
                    example: "María"
                  apellidos:
                    type: string
                    example: "González"
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/empleados/{id}:
    get:
      tags:
        - empleados
      summary: Obtener empleado por ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Empleado encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empleado'
        '404':
          description: Empleado no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - empleados
      summary: Actualizar empleado
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmpleadoUpdate'
      responses:
        '200':
          description: Empleado actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  nombres:
                    type: string
                    example: "María"
                  apellidos:
                    type: string
                    example: "González"

    delete:
      tags:
        - empleados
      summary: Eliminar empleado
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Empleado eliminado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Empleado eliminado correctamente"
        '404':
          description: Empleado no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # CONSULTAS MÉDICAS
  # ===========================================
  /consultas:
    get:
      tags:
        - consultas
      summary: Listar consultas
      description: |
        Obtiene la lista de consultas del centro médico especificado.
        
        **Centros disponibles:**
        - `1` = Quito (Central)
        - `2` = Guayaquil  
        - `3` = Cuenca
        
        **Ejemplo de uso:**
        ```
        Headers:
        X-Centro-Id: 2
        Authorization: Bearer tu_token_jwt
        ```
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
            enum: [1, 2, 3]
          example: 2
          description: |
            ID del centro médico:
            - 1 = Quito (Central)
            - 2 = Guayaquil
            - 3 = Cuenca
        - name: medico
          in: query
          description: Filtrar por médico
          schema:
            type: integer
          example: 1
        - name: desde
          in: query
          description: Fecha de inicio (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: hasta
          in: query
          description: Fecha de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-12-31"
        - name: q
          in: query
          description: Búsqueda de texto
          schema:
            type: string
          example: "dolor"
      responses:
        '200':
          description: Lista de consultas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Consulta'
        '400':
          description: X-Centro-Id requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - consultas
      summary: Crear consulta
      description: Crea una nueva consulta médica
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultaCreate'
      responses:
        '201':
          description: Consulta creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consulta'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /consultas/{id}:
    get:
      tags:
        - consultas
      summary: Obtener consulta por ID
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Consulta encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consulta'
        '404':
          description: Consulta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - consultas
      summary: Actualizar consulta
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsultaUpdate'
      responses:
        '200':
          description: Consulta actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consulta'
        '404':
          description: Consulta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - consultas
      summary: Eliminar consulta
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Consulta eliminada exitosamente
        '404':
          description: Consulta no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===========================================
  # REPORTES
  # ===========================================
  /reports/estadisticas:
    get:
      tags:
        - reportes
      summary: Estadísticas generales del centro
      description: Obtiene estadísticas generales del centro médico
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: desde
          in: query
          description: Fecha de inicio (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: hasta
          in: query
          description: Fecha de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-12-31"
      responses:
        '200':
          description: Estadísticas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstadisticasGenerales'
        '400':
          description: X-Centro-Id requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reports/consultas:
    get:
      tags:
        - reportes
      summary: Resumen de consultas por médico
      description: Obtiene un resumen de consultas agrupadas por médico
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: desde
          in: query
          description: Fecha de inicio (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: hasta
          in: query
          description: Fecha de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-12-31"
        - name: q
          in: query
          description: Búsqueda de texto
          schema:
            type: string
          example: "dolor"
      responses:
        '200':
          description: Resumen de consultas obtenido exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsultaResumen'
        '400':
          description: X-Centro-Id requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reports/pacientes-frecuentes:
    get:
      tags:
        - reportes
      summary: Pacientes más frecuentes
      description: Obtiene la lista de pacientes más frecuentes del centro
      security:
        - bearerAuth: []
      parameters:
        - name: X-Centro-Id
          in: header
          required: true
          schema:
            type: integer
          example: 1
        - name: desde
          in: query
          description: Fecha de inicio (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: hasta
          in: query
          description: Fecha de fin (YYYY-MM-DD)
          schema:
            type: string
            format: date
          example: "2024-12-31"
        - name: limite
          in: query
          description: Número máximo de resultados
          schema:
            type: integer
            default: 10
            maximum: 50
          example: 10
      responses:
        '200':
          description: Lista de pacientes frecuentes obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PacienteFrecuente'
        '400':
          description: X-Centro-Id requerido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del endpoint de login

  schemas:
    # ===========================================
    # ESQUEMAS DE AUTENTICACIÓN
    # ===========================================
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "admin@hospital.com"
        rol:
          type: string
          enum: [admin, medico]
          example: "admin"
        id_centro:
          type: integer
          example: 1
        id_medico:
          type: integer
          nullable: true
          example: 1
        centro:
          $ref: '#/components/schemas/CentroMedico'
        medico:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              example: 1
            nombres:
              type: string
              example: "Juan"
            apellidos:
              type: string
              example: "Pérez"
            especialidad:
              type: string
              example: "Cardiología"

    # ===========================================
    # ESQUEMAS DE CENTROS MÉDICOS
    # ===========================================
    CentroMedico:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Hospital Central"
        ciudad:
          type: string
          example: "Bogotá"
        direccion:
          type: string
          nullable: true
          example: "Calle 123 #45-67"

    CentroMedicoCreate:
      type: object
      required:
        - nombre
        - ciudad
      properties:
        nombre:
          type: string
          example: "Hospital Central"
        ciudad:
          type: string
          example: "Bogotá"
        direccion:
          type: string
          nullable: true
          example: "Calle 123 #45-67"

    CentroMedicoUpdate:
      type: object
      properties:
        nombre:
          type: string
          example: "Hospital Central"
        ciudad:
          type: string
          example: "Bogotá"
        direccion:
          type: string
          nullable: true
          example: "Calle 123 #45-67"

    # ===========================================
    # ESQUEMAS DE MÉDICOS
    # ===========================================
    Medico:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombres:
          type: string
          example: "Juan"
        apellidos:
          type: string
          example: "Pérez"
        id_especialidad:
          type: integer
          example: 1
        id_centro:
          type: integer
          example: 1
        especialidad_nombre:
          type: string
          example: "Cardiología"
        centro_nombre:
          type: string
          example: "Hospital Central"
        centro_ciudad:
          type: string
          example: "Bogotá"

    MedicoCreate:
      type: object
      required:
        - nombres
        - apellidos
        - id_especialidad
        - id_centro
      properties:
        nombres:
          type: string
          example: "Juan"
        apellidos:
          type: string
          example: "Pérez"
        id_especialidad:
          type: integer
          example: 1
        id_centro:
          type: integer
          example: 1

    MedicoUpdate:
      type: object
      properties:
        nombres:
          type: string
          example: "Juan"
        apellidos:
          type: string
          example: "Pérez"
        id_especialidad:
          type: integer
          example: 1
        id_centro:
          type: integer
          example: 1

    # ===========================================
    # ESQUEMAS DE ESPECIALIDADES
    # ===========================================
    Especialidad:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Cardiología"

    EspecialidadCreate:
      type: object
      required:
        - nombre
      properties:
        nombre:
          type: string
          example: "Cardiología"

    EspecialidadUpdate:
      type: object
      properties:
        nombre:
          type: string
          example: "Cardiología"

    # ===========================================
    # ESQUEMAS DE EMPLEADOS
    # ===========================================
    Empleado:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombres:
          type: string
          example: "María"
        apellidos:
          type: string
          example: "González"
        cargo:
          type: string
          example: "Enfermera"
        id_centro:
          type: integer
          example: 1
        centro_nombre:
          type: string
          example: "Hospital Central"
        centro_ciudad:
          type: string
          example: "Bogotá"

    EmpleadoCreate:
      type: object
      required:
        - nombres
        - apellidos
        - cargo
        - id_centro
      properties:
        nombres:
          type: string
          example: "María"
        apellidos:
          type: string
          example: "González"
        cargo:
          type: string
          example: "Enfermera"
        id_centro:
          type: integer
          example: 1

    EmpleadoUpdate:
      type: object
      properties:
        nombres:
          type: string
          example: "María"
        apellidos:
          type: string
          example: "González"
        cargo:
          type: string
          example: "Enfermera"
        id_centro:
          type: integer
          example: 1

    # ===========================================
    # ESQUEMAS DE CONSULTAS
    # ===========================================
    Consulta:
      type: object
      properties:
        id:
          type: integer
          example: 1
        id_centro:
          type: integer
          example: 1
        id_medico:
          type: integer
          example: 1
        paciente_nombre:
          type: string
          example: "María"
        paciente_apellido:
          type: string
          example: "González"
        id_paciente:
          type: integer
          nullable: true
          example: 1
        fecha:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        motivo:
          type: string
          nullable: true
          example: "Dolor de cabeza"
        diagnostico:
          type: string
          nullable: true
          example: "Migraña"
        tratamiento:
          type: string
          nullable: true
          example: "Analgésicos"
        estado:
          type: string
          enum: [pendiente, programada, completada, cancelada]
          example: "completada"
        duracion_minutos:
          type: integer
          example: 30
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        medico_nombres:
          type: string
          example: "Dr. Juan"
        medico_apellidos:
          type: string
          example: "Pérez"
        especialidad_nombre:
          type: string
          example: "Cardiología"
        centro_nombre:
          type: string
          example: "Hospital Central"
        centro_ciudad:
          type: string
          example: "Bogotá"

    ConsultaCreate:
      type: object
      required:
        - id_medico
        - paciente_nombre
        - paciente_apellido
        - fecha
      properties:
        id_medico:
          type: integer
          example: 1
        paciente_nombre:
          type: string
          example: "María"
        paciente_apellido:
          type: string
          example: "González"
        id_paciente:
          type: integer
          nullable: true
          example: 1
        fecha:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        motivo:
          type: string
          nullable: true
          example: "Dolor de cabeza"
        diagnostico:
          type: string
          nullable: true
          example: "Migraña"
        tratamiento:
          type: string
          nullable: true
          example: "Analgésicos"
        estado:
          type: string
          enum: [pendiente, programada, completada, cancelada]
          default: "pendiente"
          example: "pendiente"
        duracion_minutos:
          type: integer
          default: 0
          example: 30

    ConsultaUpdate:
      type: object
      properties:
        id_medico:
          type: integer
          example: 1
        paciente_nombre:
          type: string
          example: "María"
        paciente_apellido:
          type: string
          example: "González"
        id_paciente:
          type: integer
          nullable: true
          example: 1
        fecha:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        motivo:
          type: string
          nullable: true
          example: "Dolor de cabeza"
        diagnostico:
          type: string
          nullable: true
          example: "Migraña"
        tratamiento:
          type: string
          nullable: true
          example: "Analgésicos"
        estado:
          type: string
          enum: [pendiente, programada, completada, cancelada]
          example: "completada"
        duracion_minutos:
          type: integer
          example: 30

    # ===========================================
    # ESQUEMAS DE REPORTES
    # ===========================================
    EstadisticasGenerales:
      type: object
      properties:
        total_medicos:
          type: integer
          example: 25
        total_pacientes:
          type: integer
          example: 150
        total_empleados:
          type: integer
          example: 50
        total_consultas:
          type: integer
          example: 300
        pacientes_con_consultas:
          type: integer
          example: 120
        consultas_pendientes:
          type: integer
          example: 15
        consultas_programadas:
          type: integer
          example: 20
        consultas_completadas:
          type: integer
          example: 250
        consultas_canceladas:
          type: integer
          example: 15
        duracion_promedio_minutos:
          type: number
          format: float
          example: 35.5

    ConsultaResumen:
      type: object
      properties:
        id:
          type: integer
          example: 1
        medico_id:
          type: integer
          example: 1
        nombres:
          type: string
          example: "Juan"
        apellidos:
          type: string
          example: "Pérez"
        especialidad:
          type: string
          example: "Cardiología"
        centro_medico:
          type: string
          example: "Hospital Central"
        total_consultas:
          type: integer
          example: 45
        pacientes_unicos:
          type: integer
          example: 30
        primera_consulta:
          type: string
          format: date-time
          example: "2024-01-01T08:00:00Z"
        ultima_consulta:
          type: string
          format: date-time
          example: "2024-01-15T17:30:00Z"

    PacienteFrecuente:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombres:
          type: string
          example: "María"
        apellidos:
          type: string
          example: "González"
        cedula:
          type: string
          example: "12345678"
        telefono:
          type: string
          example: "3001234567"
        email:
          type: string
          format: email
          example: "maria@email.com"
        fecha_nacimiento:
          type: string
          format: date
          example: "1985-05-15"
        genero:
          type: string
          enum: [M, F, Otro]
          example: "F"
        total_consultas:
          type: integer
          example: 8
        primera_consulta:
          type: string
          format: date-time
          example: "2024-01-01T08:00:00Z"
        ultima_consulta:
          type: string
          format: date-time
          example: "2024-01-15T17:30:00Z"
        medicos_atendidos:
          type: string
          example: "Dr. Juan Pérez, Dra. Ana García"

    # ===========================================
    # ESQUEMAS DE ERROR
    # ===========================================
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Mensaje de error descriptivo"
        details:
          type: string
          nullable: true
          example: "Detalles adicionales del error"
