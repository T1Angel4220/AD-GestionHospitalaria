generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // mysql://user:pass@host:3306/hospital_central
}

enum Rol {
  admin
  medico
}

/**
 * ===== Centros Médicos =====
 */
model CentroMedico {
  id        Int        @id @default(autoincrement())
  nombre    String
  ciudad    String
  direccion String?
  Medico    Medico[]
  Empleado  Empleado[]
  Usuario   Usuario[]
  Consulta  Consulta[]

  @@map("centros_medicos")
}

/**
 * ===== Especialidades =====
 */
model Especialidad {
  id     Int    @id @default(autoincrement())
  nombre String @unique

  medicos Medico[]

  @@map("especialidades")
}

/**
 * ===== Médicos =====
 */
model Medico {
  id             Int    @id @default(autoincrement())
  nombres        String
  apellidos      String
  especialidadId Int    @map("id_especialidad")
  centroId       Int    @map("id_centro")

  especialidad Especialidad @relation(fields: [especialidadId], references: [id], onDelete: Cascade)
  centro       CentroMedico @relation(fields: [centroId], references: [id], onDelete: Cascade)
  usuarios     Usuario[] // <-- many users can point to one medico
  consultas    Consulta[]

  @@map("medicos")
}

/**
 * ===== Empleados =====
 */
model Empleado {
  id        Int    @id @default(autoincrement())
  nombres   String
  apellidos String
  cargo     String
  centroId  Int    @map("id_centro")   // en código usas centroId, en BD la columna es id_centro

  centro CentroMedico @relation(fields: [centroId], references: [id], onDelete: Cascade)

  @@map("empleados")  // tabla en la BD se llama empleados
}


/**
 * ===== Usuarios (login) =====
 */
model Usuario {
  id           Int    @id @default(autoincrement())
  email        String @unique
  passwordHash String @map("password_hash")
  rol          Rol
  centroId     Int    @map("id_centro")
  medicoId     Int?   @map("id_medico")

  centro CentroMedico @relation(fields: [centroId], references: [id], onDelete: Cascade)
  medico Medico?      @relation(fields: [medicoId], references: [id], onDelete: SetNull)
  // Nota: relación many-to-one (no @unique en medicoId)

  @@map("usuarios")
}

/**
 * ===== Consultas Médicas =====
 */
model Consulta {
  id               Int      @id @default(autoincrement())
  centroId         Int      @map("id_centro")
  medicoId         Int      @map("id_medico")
  pacienteNombre   String   @map("paciente_nombre")
  pacienteApellido String   @map("paciente_apellido")
  fecha            DateTime
  motivo           String?
  diagnostico      String?
  tratamiento      String?
  createdAt        DateTime @default(now()) @map("created_at")

  centro CentroMedico @relation(fields: [centroId], references: [id], onDelete: Cascade)
  medico Medico       @relation(fields: [medicoId], references: [id], onDelete: Cascade)

  @@map("consultas")
}
